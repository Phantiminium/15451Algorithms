#include <stdbool.h>
#include <math.h>
#include <string.h>
#include "simplexcodes/simplex.c"

/*
 *
 */

int V;
int E;

void FW(double *graph, double *dist) {
  int k;
  int i;
  int j;

  for (k = 0; k < V; k++) {
    for (i = 0; i < V; i++) {
      for (j = 0; j < V; j++) {
        if (dist[i * V + k] + dist[k * V + j] < dist[i * V + j])
          dist[i * V + j] = dist[i * V + k] + dist[k * V + j];
      }
    }
  }
}

void printm(double **M) {
  int i;
  int j;
  for (i = 0; i < V + 2; i++) {
    for (j = 0; j < V + 1; j++)
      printf("%lf ", M[i][j]);
    printf("\n");
  }
}

void print(double *A, int len) {
  int i;
  printf("\n");
  for (i = 0; i < len; i++)
    printf("%lf ", A[i]);
  printf("\n\n");
}

int main(int argc, char **argv) {
  int k;
  int i;
  int j;

  /*
  scanf("%d %d", &V, &E);

  double *adj = (double*)malloc(sizeof(double) * V * V);
  double *dist = (double*)malloc(sizeof(double) * V * V);
  memset(adj, 0.0, sizeof(double) * V * V);
  memset(dist, 0.0, sizeof(double) * V * V);
  for (k = 0; k < E; k++) {
    int r;
    int c;
    double v;
    scanf("%d %d %lf", &r, &c, &v);

    adj[r * V + c] = v;
    adj[c * V + r] = v;

    dist[r * V + c] = v;
    dist[c * V + r] = v;
  }

  FW(adj, dist);
  */

  double dist[] = {0.0, 2.0, 3.0, 2.0, 0.0, 2.0, 3.0, 2.0, 0.0};
  V = 3;

  /* Form linear program */
  double **A = (double**)malloc(sizeof(double*) * (V + 2));
  for (k = 0; k < V + 2; k++)
    A[k] = (double*)malloc(sizeof(double) * (V + 1));

  for (i = 0; i < V; i++) {
    for (j = 0; j < V + 1; j++) {
      if (j == 0) A[i][j] = 1.0;
      else A[i][j] = -1.0 * dist[i * V + j - 1];
    }
  }


  for (j = 0; j < V + 1; j++) {
    if (j == 0) A[V][j] = 0.0;
    else A[V][j] = 1.0;
  }

  for (j = 0; j < V + 1; j++) {
    if (j == 0) A[V + 1][j] = 0.0;
    else A[V + 1][j] = -1.0;
  }




  double *b = (double*)malloc(sizeof(double) * (V + 2));
  memset(b, 0.0, sizeof(double) * V);
  b[V] = 1.0;
  b[V + 1] = -1.0;

  double *c = (double*)malloc(sizeof(double) * (V + 1));
  memset(c, 0.0, sizeof(double) * (V + 1));
  c[0] = 1.0;

  double z;
  double *soln = (double*)malloc(sizeof(double) * (V + 1));

  //double x = 5.3;
  //printf("%lf\n", 5.3);
  printm(A);
  print(b, V + 2);
  print(c, V + 1);

  if (simplex(V + 2, V + 1, A, b, c, &z, soln) > -1) {
    //round z to 6 digits
    printf("%lf\n\n", z);
  }
  else printf("Something failed\n");

  for (i = 0; i < V + 1; i++)
    printf("%lf ", soln[i]);
  printf("\n");
  return 0;
}
